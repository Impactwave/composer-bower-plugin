<?php
namespace PhpKit\ComposerBowerPlugin;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Json\JsonFile;
use Composer\Package\CompletePackage;
use Composer\Plugin\PluginInterface;
use Composer\Script\Event;

class Plugin implements PluginInterface, EventSubscriberInterface
{
  /** @var Composer */
  protected $composer;
  /** @var IOInterface */
  protected $io;
  protected $lead = "<comment>[bower-plugin]</comment>";

  public static function getSubscribedEvents ()
  {
    return [
      'post-install-cmd' => [
        ['onPostUpdate', 0],
      ],
      'post-update-cmd'  => [
        ['onPostUpdate', 0],
      ],
    ];
  }

  public function activate (Composer $composer, IOInterface $io)
  {
    $this->composer = $composer;
    $this->io       = $io;
  }

  public function onPostUpdate (Event $event)
  {
    $requireBower = [];
    $overridesBower = [];
	$resolutions = null;

    if ($event->isDevMode ()) {
      $extra = $this->composer->getPackage ()->getExtra ();
      if (isset($extra['bower']) && isset($extra['bower']['require-dev']))
        $requireBower = $this->_mergeDependencyVersions ($requireBower, $extra['bower']['require-dev']);
    }

    $packages = [$this->composer->getPackage ()];
    $packages = array_merge ($packages,
      $this->composer->getRepositoryManager ()->getLocalRepository ()->getCanonicalPackages ());
    foreach ($packages as $package) {
      if ($package instanceof CompletePackage) {

        $extra = $package->getExtra ();
        if (isset($extra['bower']) && isset($extra['bower']['require']))
          $requireBower = $this->_mergeDependencyVersions ($requireBower, $extra['bower']['require']);

        if (isset($extra['bower']) && isset($extra['bower']['overrides']))
          $overridesBower = array_merge_recursive ($overridesBower, $extra['bower']['overrides']);

		if (isset($extra['bower']) && isset($extra['bower']['resolutions'])) {
          $resolutions = $extra['bower']['resolutions'];
        }
      }
    }
    if (!$requireBower)
      $this->info ("No Bower packages are required by the application or by any installed Composer package");

    $dependencies = $this->_installBower ($requireBower, $overridesBower, $resolutions);

    $this->info ((count ($dependencies) ?: "No") . " bower packages are installed");
  }

  protected function info ()
  {
    if ($this->io->isDebug ())
      call_user_func_array ([$this, 'write'], func_get_args ());
  }

  protected function write ()
  {
    foreach (func_get_args () as $msg) {
      $lines = explode (PHP_EOL, $msg);
      if ($lines) {
        $this->io->write ("$this->lead " . array_shift ($lines));
        if ($lines) {
          $msg = implode (PHP_EOL . '    ', $lines);
          $this->io->write ("    $msg");
        }
      }
    }
  }

  private function _installBower ($requireBower, $overridesBower, $resolutions)
  {
    $out    = [];
    $retVar = null;
    exec ("bower --version 2>&1", $out, $retVar);
    if ($retVar) {
      throw new \Exception ("Bower isn't installed.");
    }
    else {
      $bowerBin = 'bower';
    }

    $jsonFile = new JsonFile('bower.json');

    if ($jsonFile->exists ()) {
      $packageJson = $jsonFile->read ();
      if (!isset($packageJson['name']) ||
          $packageJson['name'] != 'temp-composer-bower-plugin'
      ) { //assume we can overwrite our own temp one
        throw new \Exception("Can't install Bower dependencies as there is already a bower.json");
      }
    }
    else {
      $packageJson = [
        'name'        => 'temp-composer-bower-plugin',
        'description' => "This file is auto-generated by 'php-kit/composer-bower-plugin'. " .
                         "Warning: do NOT edit this file.",
      ];
    }
    $packageJson['dependencies'] = $requireBower;
    $packageJson['overrides'] = $overridesBower;
	if ($resolutions !== null && count($resolutions) > 0) {
      $packageJson['resolutions'] = $resolutions;
    }
    $jsonFile->write ($packageJson);
    if (!file_exists ('.bowerrc')) {
      $vd = $this->composer->getConfig ()->get ('vendor-dir');
      if (substr ($vd, 0, strlen (getcwd ())) == getcwd ()) {
        //make vendor-dir relative go cwd
        $vd = substr ($vd, strlen (getcwd ()) + 1);
      }
      $config = [
        'directory' => $vd . '/bower_components',
      ];
      file_put_contents ('.bowerrc', json_encode ($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES |
                                                           JSON_UNESCAPED_UNICODE));
    }
    $this->write ($requireBower ? "Installing/updating Bower packages" : "Removing Bower packages (if any)");

    $cmd = "$bowerBin --allow-root install";
    passthru ($cmd, $retVar);
    if ($retVar) {
      throw new \RuntimeException('bower install failed');
    }

    $cmd = "$bowerBin --allow-root prune";
    passthru ($cmd, $retVar);
    if ($retVar) {
      throw new \RuntimeException('bower prune failed');
    }

    $config              = json_decode (file_get_contents ('.bowerrc'), true);
    $installedBowerFiles = glob ($config['directory'] . '/*/.bower.json');

    //detect actually installed versions
    $ret = [];
    foreach ($installedBowerFiles as $installedBowerFile) {
      $installedBower               = json_decode (file_get_contents ($installedBowerFile), true);
      $dep                          = $installedBower['_source'] . '#' . $installedBower['_release'];
      $ret[$installedBower['name']] = $dep;
    }
    return $ret;
  }

  /**
   * Merges 2 version of arrays.
   *
   * @param array $array1
   * @param array $array2
   * @return array
   */
  private function _mergeDependencyVersions (array $array1, array $array2)
  {
    foreach ($array2 as $package => $version) {
      if (!isset($array1[$package])) {
        $array1[$package] = $version;
      }
      else {
        if ($array1[$package] != $version) {
          $array1[$package] .= " " . $version;
        }
      }
    }
    return $array1;
  }
}
